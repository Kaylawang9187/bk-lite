networks:
  prod:

services:
  ops-console:
    image: ${DOCKER_IMAGE_OPSCONSOLE}
    restart: always
    environment:
      NATS_SERVERS: nats://${NATS_ADMIN_USERNAME}:${NATS_ADMIN_PASSWORD}@nats:4222
      NATS_NAMESPACE: bk-lite
      CLIENT_ID: ops-console
      DB_NAME: ops-console
      DB_USER: ${POSTGRES_USERNAME}
      DB_HOST: postgres
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_ENGINE: postgresql
      DB_PORT: "5432"
      DEBUG: "0"
      SECRET_KEY: ${SECRET_KEY}
    networks:
      - prod
    healthcheck:
      test: ["CMD", "curl", "-s", "-o", "/dev/null", "-w", "'%{http_code}'", "http://127.0.0.1:8000/"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    depends_on:
      system-manager:
        condition: service_healthy
    
  ops-console-web:
    image: bklite/ops-console-web
    container_name: ops-console-web
    environment:
      - NEXTAPI_URL=http://ops-console:8000
      - NEXTAUTH_URL=http://${HOST_IP}:${TRAEFIK_CONSOLE_PORT}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
    restart: always
    networks:
      - prod
    labels:
      - traefik.enable=true
      - traefik.http.routers.ops-console-web.rule=Host(${HOST_IP})
      - traefik.http.routers.ops-console-web.entrypoints=opsconsole
      - traefik.http.services.ops-console-web.loadbalancer.server.port=3000
    healthcheck:
      test: ["CMD", "node", "-e", "fetch('http://ops-console-web:3000/healthcheck').then(res => res.status === 200)"]
      start_period: 5s
    depends_on:
      - ops-console

  stargazer:
    image: ${DOCKER_IMAGE_STARGAZER}
    container_name: stargazer
    networks:
      - prod
