networks:
  prod:

services:
  system-manager:
    image: ${DOCKER_IMAGE_SYSTEM_MANAGER}
    restart: always
    environment:
      NATS_SERVERS: nats://${NATS_ADMIN_USERNAME}:${NATS_ADMIN_PASSWORD}@nats:4222
      NATS_NAMESPACE: bk-lite
      DEFAULT_REQUEST_TIMEOUT: ${DEFAULT_REQUEST_TIMEOUT}
      DB_NAME: system_mgmt
      CLIENT_ID: system-manager
      DEBUG: "0"
      SECRET_KEY: ${SECRET_KEY}
      ENABLE_CELERY: "True"
      DB_USER: ${POSTGRES_USERNAME}
      DB_HOST: postgres
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_PORT: "5432"
      DB_ENGINE: postgresql
      INSTALL_APPS: system_mgmt
      JWT_ALGORITHM: HS256
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-s", "-o", "/dev/null", "-w", "'%{http_code}'", "http://127.0.0.1:8000/"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - prod

  system-manager-web:
    image: ${DOCKER_IMAGE_SYSTEM_MANAGER_WEB}
    restart: always
    environment:
      NEXTAUTH_URL: http://${HOST_IP}:${TRAEFIK_SYSTEM_MANAGER_PORT}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      NEXTAPI_URL: http://system-manager:8000
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.system-manager-web.rule=Host(${HOST_IP})"
      - "traefik.http.routers.system-manager-web.entrypoints=system-manager-web"
      - "traefik.http.services.system-manager-web.loadbalancer.server.port=3000"
    networks:
      - prod
    depends_on:
      - system-manager
    healthcheck:
      test: ["CMD", "node", "-e", "fetch('http://system-manager-web:3000/healthcheck').then(res => res.status === 200)"]
      start_period: 5s
