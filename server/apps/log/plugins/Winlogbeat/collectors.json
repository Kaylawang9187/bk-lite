[
  {
    "id": "Winlogbeat_windows",
    "name": "Winlogbeat",
    "controller_default_run": false,
    "icon": "",
    "node_operating_system": "windows",
    "service_type": "exec",
    "executable_path": "C:\\Program Files\\fusion-collectors\\bin\\winlogbeat.exe",
    "execute_parameters": "-c %s",
    "validation_parameters": "",
    "default_template": "",
    "introduction": "Winlogbeat is a lightweight shipper for Windows event logs collection and security monitoring using official Logstash protocol.",
    "enabled_default_config": true,
    "default_config": {
      "nats": "# ================================== General ===================================\nname: \"winlogbeat-${node.ip}-${node.cloud_region}\"\ntags: [\"bk-lite\", \"logstash\", \"windows\"]\n\n# ================================== Logging ===================================\nlogging.level: info\nlogging.to_files: true\nlogging.files:\n  path: C:\\ProgramData\\fusion-collectors\\log\\winlogbeat\n  name: winlogbeat\n  keepfiles: 7\n  permissions: 0600\n\n# ================================== Outputs ===================================\noutput.logstash:\n  hosts: [\"localhost:15044\"]\n  worker: 1\n  bulk_max_size: 2048\n  timeout: 30s\n  max_retries: 3\n\n# ================================== Event Logs ===================================\nwinlogbeat.event_logs:\n- name: Security\n  level: information\n  event_id: 4624,4625,4648,4672,4720,4722,4724,4728,4732,4756\n  ignore_older: 72h\n  \n  fields:\n    log_type: \"winlogbeat\"\n    component: \"security\"\n    node_ip: \"${node.ip}\"\n    cloud_region: \"${node.cloud_region}\"\n  fields_under_root: false\n\n- name: System\n  level: warning\n  ignore_older: 72h\n  \n  fields:\n    log_type: \"winlogbeat\"\n    component: \"system\"\n    node_ip: \"${node.ip}\"\n    cloud_region: \"${node.cloud_region}\"\n  fields_under_root: false\n\n- name: Application\n  level: error\n  ignore_older: 72h\n  \n  fields:\n    log_type: \"winlogbeat\"\n    component: \"application\"\n    node_ip: \"${node.ip}\"\n    cloud_region: \"${node.cloud_region}\"\n  fields_under_root: false\n\n# ================================== Processors ===================================\nprocessors:\n  - add_host_metadata:\n      when.not.contains.tags: forwarded\n  \n  - script:\n      lang: javascript\n      source: >\n        function process(event) {\n          var evt = event.Get();\n          \n          // 标准化时间戳\n          if (evt['@timestamp']) {\n            event.Put('timestamp', evt['@timestamp']);\n          }\n          \n          // Windows 事件基础信息\n          if (evt.winlog) {\n            event.Put('event_id', evt.winlog.event_id || 0);\n            event.Put('event_provider', evt.winlog.provider_name || 'unknown');\n            event.Put('event_channel', evt.winlog.channel || 'unknown');\n            event.Put('event_level', evt.log.level || 'information');\n            event.Put('computer_name', evt.winlog.computer_name || evt.host.name || 'unknown');\n            \n            // 安全事件处理\n            if (evt.winlog.channel === 'Security') {\n              var eventId = evt.winlog.event_id;\n              if (eventId === 4624) {\n                event.Put('event_type', 'successful_logon');\n              } else if (eventId === 4625) {\n                event.Put('event_type', 'failed_logon');\n              } else if (eventId === 4648) {\n                event.Put('event_type', 'explicit_logon');\n              } else if (eventId === 4672) {\n                event.Put('event_type', 'special_privileges');\n              } else if ([4720, 4722, 4724].includes(eventId)) {\n                event.Put('event_type', 'user_account_management');\n              } else if ([4728, 4732, 4756].includes(eventId)) {\n                event.Put('event_type', 'group_management');\n              }\n            }\n            \n            // 提取用户信息\n            if (evt.winlog.event_data) {\n              var eventData = evt.winlog.event_data;\n              if (eventData.TargetUserName) {\n                event.Put('target_user_name', eventData.TargetUserName);\n              }\n              if (eventData.SubjectUserName) {\n                event.Put('subject_user_name', eventData.SubjectUserName);\n              }\n              if (eventData.LogonType) {\n                event.Put('logon_type', eventData.LogonType);\n              }\n              if (eventData.IpAddress) {\n                event.Put('source_ip', eventData.IpAddress);\n              }\n              if (eventData.ProcessName) {\n                event.Put('process_name', eventData.ProcessName);\n              }\n            }\n          }\n          \n          return event;\n        }\n"
    }
  }
]

