[
  {
    "id": "Packetbeat_linux",
    "name": "Packetbeat",
    "controller_default_run": false,
    "icon": "",
    "node_operating_system": "linux",
    "service_type": "exec",
    "executable_path": "/opt/fusion-collectors/bin/packetbeat",
    "execute_parameters": "-c %s",
    "validation_parameters": "",
    "default_template": "",
    "introduction": "Packetbeat is a real-time network packet analyzer for application monitoring and network security analysis using official Logstash protocol.",
    "enabled_default_config": true,
    "default_config": {
      "nats": "# ================================== General ===================================\nname: \"packetbeat-${node.ip}-${node.cloud_region}\"\ntags: [\"bk-lite\", \"logstash\", \"network\"]\n\n# ================================== Logging ===================================\nlogging.level: info\nlogging.to_files: true\nlogging.files:\n  path: /opt/fusion-collectors/log/packetbeat\n  name: packetbeat\n  keepfiles: 7\n  permissions: 0600\n\n# ================================== Outputs ===================================\noutput.logstash:\n  hosts: [\"localhost:15044\"]\n  worker: 1\n  bulk_max_size: 2048\n  timeout: 30s\n  max_retries: 3\n\n# ================================== Interfaces ===================================\npacketbeat.interfaces.device: any\npacketbeat.interfaces.snaplen: 1514\npacketbeat.interfaces.type: af_packet\npacketbeat.interfaces.buffer_size_mb: 30\n\n# ================================== Protocols ===================================\npacketbeat.protocols:\n- type: http\n  ports: [80, 8080, 8000, 5000, 8002]\n  max_request_headers: 64\n  max_response_headers: 64\n  max_message_size: 10485760\n  \n  fields:\n    log_type: \"packetbeat\"\n    component: \"http\"\n    node_ip: \"${node.ip}\"\n    cloud_region: \"${node.cloud_region}\"\n  fields_under_root: false\n\n- type: dns\n  ports: [53]\n  include_authorities: true\n  include_additionals: true\n  \n  fields:\n    log_type: \"packetbeat\"\n    component: \"dns\"\n    node_ip: \"${node.ip}\"\n    cloud_region: \"${node.cloud_region}\"\n  fields_under_root: false\n\n# ================================== Flows ===================================\npacketbeat.flows:\n  timeout: 30s\n  period: 10s\n  \n  fields:\n    log_type: \"packetbeat\"\n    component: \"flow\"\n    node_ip: \"${node.ip}\"\n    cloud_region: \"${node.cloud_region}\"\n  fields_under_root: false\n\n# ================================== Processors ===================================\nprocessors:\n  - add_host_metadata:\n      when.not.contains.tags: forwarded\n  \n  - script:\n      lang: javascript\n      source: >\n        function process(event) {\n          var evt = event.Get();\n          \n          // 标准化时间戳\n          if (evt['@timestamp']) {\n            event.Put('timestamp', evt['@timestamp']);\n          }\n          \n          // HTTP协议处理\n          if (evt.type === 'http') {\n            event.Put('protocol_type', 'http');\n            if (evt.http) {\n              event.Put('http_method', evt.http.request.method || 'unknown');\n              event.Put('http_status_code', evt.http.response.status_code || 0);\n              event.Put('http_url', evt.url.original || evt.url.path || 'unknown');\n              event.Put('http_response_time_ms', evt.http.response.time || 0);\n            }\n          }\n          \n          // DNS协议处理\n          if (evt.type === 'dns') {\n            event.Put('protocol_type', 'dns');\n            if (evt.dns) {\n              event.Put('dns_query', evt.dns.question.name || 'unknown');\n              event.Put('dns_query_type', evt.dns.question.type || 'unknown');\n              event.Put('dns_response_code', evt.dns.response_code || 'unknown');\n              event.Put('dns_answers_count', evt.dns.answers_count || 0);\n            }\n          }\n          \n          // 流量处理\n          if (evt.type === 'flow') {\n            event.Put('protocol_type', 'flow');\n            if (evt.flow) {\n              event.Put('flow_bytes', (evt.flow.final || {}).bytes || 0);\n              event.Put('flow_packets', (evt.flow.final || {}).packets || 0);\n            }\n          }\n          \n          // 网络层信息\n          if (evt.source && evt.destination) {\n            event.Put('source_ip', evt.source.ip || 'unknown');\n            event.Put('source_port', evt.source.port || 0);\n            event.Put('destination_ip', evt.destination.ip || 'unknown');\n            event.Put('destination_port', evt.destination.port || 0);\n          }\n          \n          return event;\n        }\n"
    }
  }
]

