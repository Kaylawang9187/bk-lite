# ================================== File Integrity Module 配置 ==================================
- module: file_integrity
  enabled: true

  # ================================== 监控路径配置 ==================================
  paths:
    {% for path in paths %}
    - {{ path }}
    {% endfor %}

  # ================================== 扫描配置 ==================================
  # 启动时全量扫描（默认: true）
  scan_at_start: {{ scan_at_start | default(true) | lower }}

  # 扫描速率限制（文件数/秒）
  scan_rate_per_sec: {{ scan_rate_per_sec | default(50) }}

  # 最大文件大小（超过则跳过）
  max_file_size: {{ max_file_size | default('100 MiB') }}

  # 扫描频率（定期重新扫描间隔）
  scan_frequency: {{ scan_frequency | default('10m') }}

  # ================================== 哈希算法配置 ==================================
  # 支持: md5, sha1, sha224, sha256, sha384, sha512, sha3_224, sha3_256, sha3_384, sha3_512
  hash_types:
    {% for hash_type in hash_types | default(['sha1', 'sha256']) %}
    - {{ hash_type }}
    {% endfor %}

  # ================================== 文件过滤配置 ==================================
  {% if exclude_files %}
  # 排除文件模式（正则表达式）
  exclude_files:
    {% for pattern in exclude_files %}
    - {{ pattern }}
    {% endfor %}
  {% else %}
  # 默认排除模式
  exclude_files:
    - '(?i)\.tmp$'
    - '(?i)\.swp$'
    - '(?i)\.log$'
    - '(?i)\.pid$'
    - '/\.git/'
    - '/\.cache/'
    - '/proc/'
    - '/sys/'
    - '/dev/'
    - '/var/cache/'
    - '/var/tmp/'
  {% endif %}

  {% if include_files %}
  # 仅包含文件模式（正则表达式）
  include_files:
    {% for pattern in include_files %}
    - {{ pattern }}
    {% endfor %}
  {% endif %}

  # ================================== 递归配置 ==================================
  # 递归深度（-1为无限制，0为仅当前目录）
  recursive: {{ recursive | default(-1) }}

  # ================================== 高级配置 ==================================
  {% if follow_symlinks is defined %}
  # 是否跟踪符号链接（默认: false）
  follow_symlinks: {{ follow_symlinks | lower }}
  {% endif %}

  {% if detect_kernel_modules is defined %}
  # 检测内核模块变化（默认: true）
  detect_kernel_modules: {{ detect_kernel_modules | lower }}
  {% endif %}

  # 文件权限检查
  check_permissions: {{ check_permissions | default(true) | lower }}

  # 文件所有者检查
  check_ownership: {{ check_ownership | default(true) | lower }}

  # ================================== 性能优化配置 ==================================
  # 并发扫描协程数
  max_file_readers: {{ max_file_readers | default(64) }}

  # 文件状态缓存大小
  file_hash_cache_size: {{ file_hash_cache_size | default(10000) }}

  # 批量处理大小
  batch_size: {{ batch_size | default(100) }}

  # ================================== 告警阈值配置 ==================================
  {% if alert_thresholds %}
  alert_thresholds:
    {% if alert_thresholds.file_changes_per_minute %}
    # 每分钟文件变更数告警阈值
    file_changes_per_minute: {{ alert_thresholds.file_changes_per_minute }}
    {% endif %}

    {% if alert_thresholds.large_file_changes %}
    # 大文件变更告警阈值（字节）
    large_file_changes: {{ alert_thresholds.large_file_changes }}
    {% endif %}

    {% if alert_thresholds.critical_file_changes %}
    # 关键文件变更告警
    critical_file_changes: {{ alert_thresholds.critical_file_changes | lower }}
    {% endif %}
  {% endif %}

  # ================================== 字段标识配置 ==================================
  fields:
    collect_type: "file_integrity"
    instance_id: "{{ instance_id }}"
    monitoring_scope: "{{ monitoring_scope | default('system') }}"
    {% if compliance_standard %}
    compliance_standard: "{{ compliance_standard }}"
    {% endif %}
    {% if custom_fields %}
    {% for key, value in custom_fields.items() %}
    {{ key }}: "{{ value }}"
    {% endfor %}
    {% endif %}
  fields_under_root: {{ fields_under_root | default(true) | lower }}

  # ================================== 处理器配置 ==================================
  processors:
    # 添加主机元数据
    - add_host_metadata:
        when.not.contains.tags: forwarded

    # 文件完整性事件增强处理
    - script:
        lang: javascript
        source: >
          function process(event) {
            var evt = event.Get();

            // 标准化文件路径
            if (evt.file && evt.file.path) {
              event.Put("file_path", evt.file.path);

              // 提取文件扩展名
              var path = evt.file.path;
              var lastDot = path.lastIndexOf('.');
              if (lastDot > 0) {
                event.Put("file_extension", path.substring(lastDot + 1).toLowerCase());
              }

              // 提取文件目录
              var lastSlash = path.lastIndexOf('/');
              if (lastSlash > 0) {
                event.Put("file_directory", path.substring(0, lastSlash));
                event.Put("file_name", path.substring(lastSlash + 1));
              }

              // 文件类型分类
              var criticalPaths = ["/etc/passwd", "/etc/shadow", "/etc/sudoers", "/bin/", "/sbin/"];
              var isCritical = criticalPaths.some(function(criticalPath) {
                return path.startsWith(criticalPath);
              });
              event.Put("file_criticality", isCritical ? "critical" : "normal");
            }

            // 标准化文件操作类型
            if (evt.event && evt.event.action) {
              var action = evt.event.action;
              event.Put("file_action", action);

              // 操作类型分类
              if (["created", "initial_scan"].includes(action)) {
                event.Put("action_category", "creation");
              } else if (["updated", "attributes_modified"].includes(action)) {
                event.Put("action_category", "modification");
              } else if (["deleted", "moved"].includes(action)) {
                event.Put("action_category", "deletion");
              } else {
                event.Put("action_category", "other");
              }
            }

            // 提取文件属性
            if (evt.file) {
              if (evt.file.size !== undefined) {
                event.Put("file_size", evt.file.size);

                // 文件大小分类
                var size = evt.file.size;
                if (size < 1024) {
                  event.Put("file_size_category", "small");
                } else if (size < 1024 * 1024) {
                  event.Put("file_size_category", "medium");
                } else if (size < 100 * 1024 * 1024) {
                  event.Put("file_size_category", "large");
                } else {
                  event.Put("file_size_category", "huge");
                }
              }

              if (evt.file.mode) {
                event.Put("file_mode", evt.file.mode);
              }

              if (evt.file.owner) {
                event.Put("file_owner", evt.file.owner);
              }

              if (evt.file.group) {
                event.Put("file_group", evt.file.group);
              }

              // 提取哈希值
              if (evt.file.hash) {
                if (evt.file.hash.sha1) {
                  event.Put("file_hash_sha1", evt.file.hash.sha1);
                }
                if (evt.file.hash.sha256) {
                  event.Put("file_hash_sha256", evt.file.hash.sha256);
                }
              }
            }

            return event;
          }

    # 文件变更风险评估
    - script:
        lang: javascript
        source: >
          function process(event) {
            var evt = event.Get();
            var riskScore = 0;
            var riskFactors = [];

            // 基于文件路径的风险评估
            var filePath = evt.file_path || "";
            var criticalPaths = ["/etc/passwd", "/etc/shadow", "/etc/sudoers", "/bin/", "/sbin/"];
            var systemPaths = ["/etc/", "/boot/", "/lib/", "/usr/bin/", "/usr/sbin/"];

            if (criticalPaths.some(function(p) { return filePath.startsWith(p); })) {
              riskScore += 10;
              riskFactors.push("critical_system_file");
            } else if (systemPaths.some(function(p) { return filePath.startsWith(p); })) {
              riskScore += 5;
              riskFactors.push("system_file");
            }

            // 基于操作类型的风险评估
            var action = evt.file_action || "";
            if (["deleted", "moved"].includes(action)) {
              riskScore += 8;
              riskFactors.push("file_removal");
            } else if (["updated", "attributes_modified"].includes(action)) {
              riskScore += 3;
              riskFactors.push("file_modification");
            }

            // 基于文件大小的风险评估
            var fileSize = evt.file_size || 0;
            if (fileSize > 100 * 1024 * 1024) { // 100MB
              riskScore += 2;
              riskFactors.push("large_file");
            }

            // 基于时间的风险评估（非工作时间）
            var timestamp = new Date(evt['@timestamp'] || evt.timestamp);
            var hour = timestamp.getHours();
            if (hour < 6 || hour > 22) {
              riskScore += 2;
              riskFactors.push("off_hours");
            }

            // 设置风险等级
            var riskLevel = "low";
            if (riskScore >= 15) {
              riskLevel = "critical";
            } else if (riskScore >= 10) {
              riskLevel = "high";
            } else if (riskScore >= 5) {
              riskLevel = "medium";
            }

            event.Put("risk_score", riskScore);
            event.Put("risk_level", riskLevel);
            event.Put("risk_factors", riskFactors);

            return event;
          }

    {% if processors %}
    # 用户自定义处理器
    {% for processor in processors %}
    - {{ processor | to_yaml | indent(6, True) }}
    {% endfor %}
    {% endif %}

    # 删除不必要的字段以减少存储
    - drop_fields:
        fields: ["agent.ephemeral_id", "agent.hostname", "agent.id", "agent.type", "agent.version"]
        ignore_missing: true
