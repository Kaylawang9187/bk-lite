[
  {
    "id": "Metricbeat_linux",
    "name": "Metricbeat",
    "controller_default_run": false,
    "icon": "",
    "node_operating_system": "linux",
    "service_type": "exec",
    "executable_path": "/opt/fusion-collectors/bin/metricbeat",
    "execute_parameters": "-c %s",
    "validation_parameters": "",
    "default_template": "",
    "introduction": "Metricbeat is a lightweight shipper for system and service metrics collection and monitoring using official Logstash protocol.",
    "enabled_default_config": true,
    "default_config": {
      "nats": "# ================================== General ===================================\nname: \"metricbeat-${node.ip}-${node.cloud_region}\"\ntags: [\"bk-lite\", \"logstash\", \"metrics\"]\n\n# ================================== Logging ===================================\nlogging.level: info\nlogging.to_files: true\nlogging.files:\n  path: /opt/fusion-collectors/log/metricbeat\n  name: metricbeat\n  keepfiles: 7\n  permissions: 0600\n\n# ================================== Outputs ===================================\noutput.logstash:\n  hosts: [\"localhost:15044\"]\n  worker: 1\n  bulk_max_size: 2048\n  timeout: 30s\n  max_retries: 3\n\n# ================================== Modules ===================================\nmetricbeat.modules:\n- module: system\n  metricsets:\n    - cpu\n    - load\n    - memory\n    - network\n    - process\n    - process_summary\n    - socket_summary\n    - entropy\n    - core\n    - diskio\n    - socket\n    - service\n  enabled: true\n  period: 10s\n  processes: ['.*']\n  \n  fields:\n    log_type: \"metricbeat\"\n    component: \"system\"\n    node_ip: \"${node.ip}\"\n    cloud_region: \"${node.cloud_region}\"\n  fields_under_root: false\n\n- module: process\n  metricsets: [\"process\"]\n  enabled: true\n  period: 10s\n  processes: ['.*']\n  process.include_top_n.by_cpu: 5\n  process.include_top_n.by_memory: 5\n  process.cmdline.cache.enabled: true\n  process.cgroups.enabled: true\n  process.env.whitelist: []\n  process.include_cpu_ticks: false\n  \n  fields:\n    log_type: \"metricbeat\"\n    component: \"process\"\n    node_ip: \"${node.ip}\"\n    cloud_region: \"${node.cloud_region}\"\n  fields_under_root: false\n\n# ================================== Processors ===================================\nprocessors:\n  - add_host_metadata:\n      when.not.contains.tags: forwarded\n  \n  - script:\n      lang: javascript\n      source: >\n        function process(event) {\n          var evt = event.Get();\n          \n          // 标准化时间戳\n          if (evt['@timestamp']) {\n            event.Put('timestamp', evt['@timestamp']);\n          }\n          \n          // 提取关键性能指标\n          if (evt.system) {\n            if (evt.system.cpu && evt.system.cpu.total) {\n              event.Put('cpu_usage_pct', Math.round(evt.system.cpu.total.pct * 100) / 100);\n            }\n            \n            if (evt.system.memory) {\n              var memUsedPct = (evt.system.memory.used.bytes / evt.system.memory.total) * 100;\n              event.Put('memory_usage_pct', Math.round(memUsedPct * 100) / 100);\n              event.Put('memory_used_mb', Math.round(evt.system.memory.used.bytes / 1024 / 1024));\n            }\n            \n            if (evt.system.load) {\n              event.Put('load_1m', evt.system.load['1']);\n              event.Put('load_5m', evt.system.load['5']);\n              event.Put('load_15m', evt.system.load['15']);\n            }\n          }\n          \n          if (evt.process) {\n            event.Put('process_name', evt.process.name || 'unknown');\n            event.Put('process_pid', evt.process.pid || 0);\n            if (evt.process.cpu) {\n              event.Put('process_cpu_pct', Math.round((evt.process.cpu.total.pct || 0) * 100) / 100);\n            }\n            if (evt.process.memory) {\n              event.Put('process_memory_mb', Math.round((evt.process.memory.rss.bytes || 0) / 1024 / 1024));\n            }\n          }\n          \n          return event;\n        }\n"
    }
  }
]

