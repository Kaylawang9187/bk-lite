# ================================== Process Module 配置 ==================================
- module: process
  enabled: true

  # ================================== 指标集配置 ==================================
  metricsets:
    {% for metricset in metricsets | default(['process']) %}
    - {{ metricset }}
    {% endfor %}

  # ================================== 收集周期配置 ==================================
  period: {{ period | default('10s') }}

  # ================================== 进程过滤配置 ==================================
  # 进程名称匹配模式
  processes:
    {% for process in processes | default(['.*']) %}
    - {{ process }}
    {% endfor %}

  # ================================== Top N 进程配置 ==================================
  # 按CPU使用率排序的Top N进程
  process.include_top_n.by_cpu: {{ top_n_cpu | default(5) }}

  # 按内存使用排序的Top N进程
  process.include_top_n.by_memory: {{ top_n_memory | default(5) }}

  # ================================== 进程详细信息配置 ==================================
  # 是否包含进程参数（可能包含敏感信息）
  {% if include_args is defined %}
  process.include_args: {{ include_args | lower }}
  {% else %}
  process.include_args: false
  {% endif %}

  # 是否包含CPU时钟周期
  {% if include_cpu_ticks is defined %}
  process.include_cpu_ticks: {{ include_cpu_ticks | lower }}
  {% else %}
  process.include_cpu_ticks: false
  {% endif %}

  # 命令行缓存启用
  {% if cmdline_cache is defined %}
  process.cmdline.cache.enabled: {{ cmdline_cache | lower }}
  {% else %}
  process.cmdline.cache.enabled: true
  {% endif %}

  # ================================== CGroups 配置 ==================================
  # 启用CGroups信息收集
  {% if cgroups_enabled is defined %}
  process.cgroups.enabled: {{ cgroups_enabled | lower }}
  {% else %}
  process.cgroups.enabled: true
  {% endif %}

  # ================================== 环境变量配置 ==================================
  {% if env_whitelist %}
  # 允许收集的环境变量白名单
  process.env.whitelist:
    {% for env_var in env_whitelist %}
    - {{ env_var }}
    {% endfor %}
  {% else %}
  # 默认不收集环境变量
  process.env.whitelist: []
  {% endif %}

  # ================================== 字段标识配置 ==================================
  fields:
    collect_type: "process"
    instance_id: "{{ instance_id }}"
    monitoring_scope: "{{ monitoring_scope | default('all') }}"
    {% if process_category %}
    process_category: "{{ process_category }}"
    {% endif %}
    {% if custom_fields %}
    {% for key, value in custom_fields.items() %}
    {{ key }}: "{{ value }}"
    {% endfor %}
    {% endif %}
  fields_under_root: {{ fields_under_root | default(true) | lower }}

  # ================================== 处理器配置 ==================================
  processors:
    # 添加主机元数据
    - add_host_metadata:
        when.not.contains.tags: forwarded

    # 进程指标标准化处理
    - script:
        lang: javascript
        source: >
          function process(event) {
            var evt = event.Get();

            // 标准化时间戳
            if (evt['@timestamp']) {
              event.Put('timestamp', evt['@timestamp']);
            }

            // 进程基本信息标准化
            if (evt.process) {
              var proc = evt.process;
              event.Put('process_name', proc.name || 'unknown');
              event.Put('process_pid', proc.pid || 0);
              event.Put('process_ppid', proc.ppid || 0);
              event.Put('process_state', proc.state || 'unknown');

              if (proc.cmdline) {
                event.Put('process_cmdline', proc.cmdline);
              }

              if (proc.cwd) {
                event.Put('process_cwd', proc.cwd);
              }

              if (proc.executable) {
                event.Put('process_executable', proc.executable);
              }

              // CPU指标标准化
              if (proc.cpu) {
                var cpuPct = (proc.cpu.total && proc.cpu.total.pct !== undefined) ?
                            Math.round(proc.cpu.total.pct * 10000) / 100 : 0;
                event.Put('process_cpu_pct', cpuPct);

                if (proc.cpu.start_time) {
                  var startTime = new Date(proc.cpu.start_time);
                  var now = new Date(evt['@timestamp'] || Date.now());
                  var uptimeSeconds = Math.floor((now - startTime) / 1000);
                  event.Put('process_uptime_seconds', uptimeSeconds);
                }
              }

              // 内存指标标准化
              if (proc.memory) {
                var memoryMB = proc.memory.rss && proc.memory.rss.bytes ?
                              Math.round(proc.memory.rss.bytes / 1024 / 1024) : 0;
                event.Put('process_memory_mb', memoryMB);

                if (proc.memory.rss && proc.memory.rss.pct !== undefined) {
                  event.Put('process_memory_pct', Math.round(proc.memory.rss.pct * 100) / 100);
                }

                if (proc.memory.vms && proc.memory.vms.bytes) {
                  event.Put('process_memory_vms_mb', Math.round(proc.memory.vms.bytes / 1024 / 1024));
                }
              }

              // 文件描述符信息
              if (proc.fd && proc.fd.open !== undefined) {
                event.Put('process_fd_count', proc.fd.open);
                if (proc.fd.limit !== undefined) {
                  event.Put('process_fd_limit', proc.fd.limit);
                  event.Put('process_fd_usage_pct', Math.round((proc.fd.open / proc.fd.limit) * 10000) / 100);
                }
              }

              // 线程信息
              if (proc.num_threads !== undefined) {
                event.Put('process_threads', proc.num_threads);
              }
            }

            // 用户信息标准化
            if (evt.user) {
              event.Put('user_name', evt.user.name || 'unknown');
              event.Put('user_id', evt.user.id || 'unknown');
            }

            return event;
          }

    # 进程分类和告警处理
    - script:
        lang: javascript
        source: >
          function process(event) {
            var evt = event.Get();
            var processName = evt.process_name || '';
            var alerts = [];
            var categories = [];

            // 进程分类
            var systemProcesses = ['systemd', 'kernel', 'kthreadd', 'sshd', 'dbus', 'NetworkManager'];
            var isSystemProcess = systemProcesses.some(function(p) {
              return processName.toLowerCase().includes(p.toLowerCase());
            });

            if (isSystemProcess) {
              categories.push('system_process');
            } else {
              categories.push('user_process');
            }

            // 资源使用分类和告警
            var cpuPct = evt.process_cpu_pct || 0;
            var memoryMB = evt.process_memory_mb || 0;
            var threads = evt.process_threads || 0;
            var fdCount = evt.process_fd_count || 0;

            // CPU使用告警
            if (cpuPct >= {{ high_cpu_threshold | default(80) }}) {
              alerts.push('high_cpu_usage');
              categories.push('high_cpu');
            } else if (cpuPct >= {{ medium_cpu_threshold | default(50) }}) {
              categories.push('medium_cpu');
            }

            // 内存使用告警
            if (memoryMB >= {{ high_memory_threshold | default(500) }}) {
              alerts.push('high_memory_usage');
              categories.push('high_memory');
            } else if (memoryMB >= {{ medium_memory_threshold | default(100) }}) {
              categories.push('medium_memory');
            }

            // 线程数告警
            if (threads >= {{ high_thread_threshold | default(100) }}) {
              alerts.push('many_threads');
              categories.push('many_threads');
            }

            // 文件描述符告警
            if (fdCount >= {{ high_fd_threshold | default(500) }}) {
              alerts.push('many_file_descriptors');
              categories.push('high_fd_usage');
            }

            // 僵尸进程检查
            if (evt.process_state === 'zombie') {
              alerts.push('zombie_process');
              categories.push('zombie');
            }

            event.Put('process_categories', categories);
            if (alerts.length > 0) {
              event.Put('process_alerts', alerts);
            }

            return event;
          }

    {% if processors %}
    # 用户自定义处理器
    {% for processor in processors %}
    - {{ processor | to_yaml | indent(6, True) }}
    {% endfor %}
    {% endif %}

    # 删除不必要的字段以减少存储
    - drop_fields:
        fields: ["agent.ephemeral_id", "agent.hostname", "agent.id", "agent.type", "agent.version"]
        ignore_missing: true

